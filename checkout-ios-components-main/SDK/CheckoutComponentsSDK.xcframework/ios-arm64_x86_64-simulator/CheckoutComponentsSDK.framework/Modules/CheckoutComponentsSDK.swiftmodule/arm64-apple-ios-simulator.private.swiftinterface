// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CheckoutComponentsSDK
import Combine
import DeveloperToolsSupport
import Foundation
import PassKit
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _PassKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
public enum DeclineReason : Swift.String, Swift.Codable, Swift.Sendable {
  case notEnoughFunds
  case invalidPaymentSessionData
  case invalidCustomerData
  case merchantMisconfiguration
  case tryAgain
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CheckoutComponents : Swift.Sendable {
  public init(configuration: CheckoutComponentsSDK.CheckoutComponents.Configuration)
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func create(_ type: CheckoutComponentsSDK.CheckoutComponents.PaymentMethod) throws(CheckoutComponentsSDK.CheckoutComponents.Error) -> any CheckoutComponentsSDK.CheckoutComponents.Actionable
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func create(_ type: CheckoutComponentsSDK.CheckoutComponents.Component) throws(CheckoutComponentsSDK.CheckoutComponents.Error) -> any CheckoutComponentsSDK.CheckoutComponents.Actionable
  #endif
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public struct ColorTokens : Swift.Equatable, Swift.Sendable {
    public init(action: SwiftUICore.Color = .brightBlue, background: SwiftUICore.Color = .white, border: SwiftUICore.Color = .softGray, disabled: SwiftUICore.Color = .brightGray, error: SwiftUICore.Color = .deepRed, formBackground: SwiftUICore.Color = .white, formBorder: SwiftUICore.Color = .mediumGray, inverse: SwiftUICore.Color = .white, outline: SwiftUICore.Color = .lightBlue, primary: SwiftUICore.Color = .black, secondary: SwiftUICore.Color = .lightGray, success: SwiftUICore.Color = .checkoutGreen)
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.ColorTokens, b: CheckoutComponentsSDK.CheckoutComponents.ColorTokens) -> Swift.Bool
  }
}
extension SwiftUICore.Color {
  public static let brightBlue: SwiftUICore.Color
  public static let lightBlue: SwiftUICore.Color
  public static let deepRed: SwiftUICore.Color
  public static let mediumGray: SwiftUICore.Color
  public static let lightGray: SwiftUICore.Color
  public static let softGray: SwiftUICore.Color
  public static let brightGray: SwiftUICore.Color
  public static let checkoutGreen: SwiftUICore.Color
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public struct DesignTokens : Swift.Equatable, Swift.Sendable {
    public typealias Fonts = CheckoutComponentsSDK.CheckoutComponents.Font.Style
    public init(colorTokensMain: CheckoutComponentsSDK.CheckoutComponents.ColorTokens = .init(), fonts: CheckoutComponentsSDK.CheckoutComponents.DesignTokens.Fonts = .init(), borderButtonRadius: CheckoutComponentsSDK.CheckoutComponents.BorderRadius = .init(radius: CommonUIConstants.cornerRadius), borderFormRadius: CheckoutComponentsSDK.CheckoutComponents.BorderRadius = .init(radius: CommonUIConstants.formCornerRadius))
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.DesignTokens, b: CheckoutComponentsSDK.CheckoutComponents.DesignTokens) -> Swift.Bool
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public typealias PaymentID = Swift.String
  public struct Callbacks : Swift.Sendable {
    public let onReady: (@Sendable (any CheckoutComponentsSDK.CheckoutComponents.Actionable) -> Swift.Void)?
    public let handleTap: (@Sendable (any CheckoutComponentsSDK.CheckoutComponents.Actionable) async -> Swift.Bool)?
    public let onSubmit: (@Sendable (any CheckoutComponentsSDK.CheckoutComponents.Actionable) -> Swift.Void)?
    public let onSuccess: (@Sendable (any CheckoutComponentsSDK.CheckoutComponents.Actionable, CheckoutComponentsSDK.CheckoutComponents.PaymentID) -> Swift.Void)
    public let onError: (@Sendable (CheckoutComponentsSDK.CheckoutComponents.Error) -> Swift.Void)
    public init(onReady: (@Sendable (any CheckoutComponentsSDK.CheckoutComponents.Actionable) -> Swift.Void)? = nil, onSubmit: (@Sendable (any CheckoutComponentsSDK.CheckoutComponents.Actionable) -> Swift.Void)? = nil, handleTap: (@Sendable (any CheckoutComponentsSDK.CheckoutComponents.Actionable) async -> Swift.Bool)? = nil, onSuccess: @escaping @Sendable (any CheckoutComponentsSDK.CheckoutComponents.Actionable, CheckoutComponentsSDK.CheckoutComponents.PaymentID) -> Swift.Void, onError: @escaping @Sendable (CheckoutComponentsSDK.CheckoutComponents.Error) -> Swift.Void)
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public enum ErrorType : Swift.Equatable, Swift.Sendable {
    case integration
    case request
    case paymentMethod
    case submit
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.ErrorType, b: CheckoutComponentsSDK.CheckoutComponents.ErrorType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum CommonUIConstants : Swift.Sendable {
  public static let cornerRadius: CoreFoundation.CGFloat
  public static let formCornerRadius: CoreFoundation.CGFloat
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public enum PaymentMethod : Swift.Equatable, Swift.Codable, Swift.Hashable, Swift.Sendable {
    case card
    case applePay(merchantIdentifier: Swift.String)
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.PaymentMethod, b: CheckoutComponentsSDK.CheckoutComponents.PaymentMethod) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public struct Font : Swift.Equatable, Swift.Sendable {
    public init(font: SwiftUICore.Font, lineHeight: CoreFoundation.CGFloat, letterSpacing: CoreFoundation.CGFloat)
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.Font, b: CheckoutComponentsSDK.CheckoutComponents.Font) -> Swift.Bool
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public enum TranslationKey : Swift.String, Swift.Sendable, Swift.CaseIterable {
    case card
    case cardHolderName
    case cardNumber
    case cardNumberInvalid
    case cardNumberNotSupported
    case cardExpiryDate
    case cardExpiryDateInvalid
    case cardExpiryDateIncomplete
    case cardExpiryDatePlaceholderMonth
    case cardExpiryDatePlaceholderYear
    case cardSecurityCode
    case cardSecurityCodeInvalid
    case cardSecurityCodePlaceholder
    case formRequired
    case payButtonPay
    case payButtonPaymentComplete
    case payButtonPaymentProcessing
    case paymentDeclinedInvalidCustomerData
    case paymentDeclinedInvalidPaymentSessionData
    case paymentDeclinedMerchantMisconfiguration
    case paymentDeclinedNotEnoughFunds
    case paymentDeclinedTryAgain
    public init?(rawValue: Swift.String)
    public typealias AllCases = [CheckoutComponentsSDK.CheckoutComponents.TranslationKey]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [CheckoutComponentsSDK.CheckoutComponents.TranslationKey] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension CheckoutComponentsSDK.CheckoutComponents.Font {
  public static let button: CheckoutComponentsSDK.CheckoutComponents.Font
  public static let input: CheckoutComponentsSDK.CheckoutComponents.Font
  public static let label: CheckoutComponentsSDK.CheckoutComponents.Font
  public static let footnote: CheckoutComponentsSDK.CheckoutComponents.Font
  public static let subheading: CheckoutComponentsSDK.CheckoutComponents.Font
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public enum Environment : Swift.Sendable {
    case sandbox, production
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.Environment, b: CheckoutComponentsSDK.CheckoutComponents.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftUICore.Color {
  public init(hex: Swift.String, alpha: Swift.Double = 1.0)
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public struct ErrorDetails : Swift.Equatable, Swift.Sendable {
    public let mobileSessionID: Swift.String
    public let paymentSessionID: Swift.String
    public let type: CheckoutComponentsSDK.CheckoutComponents.Error.ComponentType
    public init(paymentSessionID: Swift.String, mobileSessionID: Swift.String, type: CheckoutComponentsSDK.CheckoutComponents.Error.ComponentType)
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.ErrorDetails, b: CheckoutComponentsSDK.CheckoutComponents.ErrorDetails) -> Swift.Bool
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public struct Error : Foundation.LocalizedError, Swift.Equatable, Swift.Sendable {
    public let type: CheckoutComponentsSDK.CheckoutComponents.ErrorType
    public let errorCode: CheckoutComponentsSDK.CheckoutComponents.ErrorCode
    public let details: CheckoutComponentsSDK.CheckoutComponents.ErrorDetails
    public enum ComponentType : Swift.String, Swift.Sendable {
      case card
      case applePay
      case flow
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.Error, b: CheckoutComponentsSDK.CheckoutComponents.Error) -> Swift.Bool
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public protocol Actionable : Swift.Sendable {
    var id: Foundation.UUID { get }
    var name: Swift.String { get }
    var isAvailable: Swift.Bool { get }
    @_Concurrency.MainActor func render() -> SwiftUICore.AnyView
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public enum Component : Swift.Codable, Swift.Equatable {
    case flow(options: Swift.Set<CheckoutComponentsSDK.CheckoutComponents.PaymentMethod> = [])
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.Component, b: CheckoutComponentsSDK.CheckoutComponents.Component) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public enum ErrorCode : Foundation.LocalizedError, Swift.Equatable, Swift.Sendable {
    case configurationInvalid(type: Swift.String)
    case paymentMethodAttemptFailed(message: Swift.String)
    case paymentSessionFailed(message: Swift.String)
    case paymentRequestFailed(message: Swift.String)
    case cardAuthenticationFailed(message: Swift.String)
    case componentNotSupported(type: CheckoutComponentsSDK.CheckoutComponents.Error.ComponentType)
    case paymentRequestDeclined(message: Swift.String)
    case componentIsAvailableNotChecked(type: CheckoutComponentsSDK.CheckoutComponents.Error.ComponentType)
    public var localizedDescription: Swift.String {
      get
    }
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.ErrorCode, b: CheckoutComponentsSDK.CheckoutComponents.ErrorCode) -> Swift.Bool
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public struct Configuration : Swift.Sendable {
    #if compiler(>=5.3) && $TypedThrows
    public init(paymentSession: CheckoutComponentsSDK.PaymentSession, publicKey: Swift.String, environment: CheckoutComponentsSDK.CheckoutComponents.Environment, appearance: CheckoutComponentsSDK.CheckoutComponents.DesignTokens = .init(), locale: Swift.String? = nil, translations: [Swift.String : [CheckoutComponentsSDK.CheckoutComponents.TranslationKey : Swift.String]] = [:], callbacks: CheckoutComponentsSDK.CheckoutComponents.Callbacks) async throws(CheckoutComponentsSDK.CheckoutComponents.Error)
    #endif
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public struct BorderRadius : Swift.Equatable, Swift.Sendable {
    public init(radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner = .allCorners)
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.BorderRadius, b: CheckoutComponentsSDK.CheckoutComponents.BorderRadius) -> Swift.Bool
  }
}
extension CheckoutComponentsSDK.CheckoutComponents {
  public enum Locale : Swift.String, Swift.Sendable, Swift.CaseIterable {
    case ar
    case da_DK
    case de_DE
    case el
    case en_GB
    case es_ES
    case fi_FI
    case fil_PH
    case fr_FR
    case hi_IN
    case id_ID
    case it_IT
    case ja_JP
    case ms_MY
    case nb_NO
    case nl_NL
    case pt_PT
    case sv_SE
    case th_TH
    case vi_VN
    case zh_CN
    case zh_HK
    case zh_TW
    public init?(rawValue: Swift.String)
    public typealias AllCases = [CheckoutComponentsSDK.CheckoutComponents.Locale]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [CheckoutComponentsSDK.CheckoutComponents.Locale] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
final public class PaymentSession : Swift.Decodable, Swift.Sendable {
  public init(id: Swift.String, paymentSessionSecret: Swift.String)
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
extension CheckoutComponentsSDK.CheckoutComponents.Font {
  public struct Style : Swift.Equatable, Swift.Sendable {
    public init(button: CheckoutComponentsSDK.CheckoutComponents.Font = .button, footnote: CheckoutComponentsSDK.CheckoutComponents.Font = .footnote, input: CheckoutComponentsSDK.CheckoutComponents.Font = .input, label: CheckoutComponentsSDK.CheckoutComponents.Font = .label, subheading: CheckoutComponentsSDK.CheckoutComponents.Font = .subheading)
    public static func == (a: CheckoutComponentsSDK.CheckoutComponents.Font.Style, b: CheckoutComponentsSDK.CheckoutComponents.Font.Style) -> Swift.Bool
  }
}
extension CheckoutComponentsSDK.DeclineReason : Swift.Equatable {}
extension CheckoutComponentsSDK.DeclineReason : Swift.Hashable {}
extension CheckoutComponentsSDK.DeclineReason : Swift.RawRepresentable {}
extension CheckoutComponentsSDK.CheckoutComponents.ErrorType : Swift.Hashable {}
extension CheckoutComponentsSDK.CheckoutComponents.TranslationKey : Swift.Equatable {}
extension CheckoutComponentsSDK.CheckoutComponents.TranslationKey : Swift.Hashable {}
extension CheckoutComponentsSDK.CheckoutComponents.TranslationKey : Swift.RawRepresentable {}
extension CheckoutComponentsSDK.CheckoutComponents.Environment : Swift.Equatable {}
extension CheckoutComponentsSDK.CheckoutComponents.Environment : Swift.Hashable {}
extension CheckoutComponentsSDK.CheckoutComponents.Error.ComponentType : Swift.Equatable {}
extension CheckoutComponentsSDK.CheckoutComponents.Error.ComponentType : Swift.Hashable {}
extension CheckoutComponentsSDK.CheckoutComponents.Error.ComponentType : Swift.RawRepresentable {}
extension CheckoutComponentsSDK.CheckoutComponents.Locale : Swift.Equatable {}
extension CheckoutComponentsSDK.CheckoutComponents.Locale : Swift.Hashable {}
extension CheckoutComponentsSDK.CheckoutComponents.Locale : Swift.RawRepresentable {}
